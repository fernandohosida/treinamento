openapi: 3.0.3
info:
  title: Ecommerce Api
  description: Ecommerce Api
  version: 1.0.0
tags:
  - name: Produto
    description: --
paths:
  /v1/produto:
    get:
      tags:
        - Produto
      summary: get produto
      description: |
        - Compatible with the follow versions
      operationId: getProduto
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          $ref: '#/components/responses/produtoResponse'
        204:
          description: No content
        400:
          $ref: '#/components/responses/badRequest'
        401:
          $ref: '#/components/responses/unauthorizedRequest'
        default:
          $ref: '#/components/responses/unexpectedError'
    post:
      tags:
        - Produto
      operationId: saveProduto
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/produtoRequest'
      responses:
        200:
          $ref: '#/components/responses/produtoResponse'
        204:
          description: No content
        400:
          $ref: '#/components/responses/badRequest'
        401:
          $ref: '#/components/responses/unauthorizedRequest'
        default:
          $ref: '#/components/responses/unexpectedError'
components:
  responses:
    badRequest:
      description: 'Bad request.'
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/problemResponse'
          examples:
            badRequest:
              $ref: '#/components/examples/badRequest'
    unauthorizedRequest:
      description: 'Unauthorized request.'
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/problemResponse'
          examples:
            unauthorizedRequest:
              $ref: '#/components/examples/unauthorizedRequest'
    unexpectedError:
      description: 'Unauthorized request.'
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/problemResponse'
          examples:
            unauthorizedRequest:
              $ref: '#/components/examples/unexpectedError'
    produtoResponse:
      description: 'Response for daily movements GET'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/produtoResponse'
  schemas:
    produtoRequest:
      type: object
      additionalProperties: false
      properties:
        produto:
          type: string
    produtoResponse:
      type: object
      additionalProperties: false
      properties:
        id:
          type: string
          format: uuid
        produto:
          type: string
        tipo:
          type: string
        valor:
          type: number
          format: double
    account:
      type: integer
      format: int64
      example: 1234
    problemResponse: # Can be referenced as '#/components/schemas/problemResponse'
      type: object
      required:
        - status
        - title
      additionalProperties: true
      properties:
        type:
          type: string
          format: uri
          description: |
            An absolute URI that identifies the problem type.  When dereferenced,
            it SHOULD provide human-readable documentation for the problem type
            (e.g., using HTML).
          default: 'about:blank'
          example: 'https://zalando.github.io/problem/constraint-violation'
        title:
          type: string
          description: |
            A short, summary of the problem type. Written in english and readable
            for engineers (usually not suited for non technical stakeholders and
            not localized); example: Service Unavailable
        status:
          type: integer
          format: int32
          description: |
            The HTTP status code generated by the origin server for this occurrence
            of the problem.
          minimum: 100
          maximum: 600
          exclusiveMaximum: true
          example: 503
        detail:
          type: string
          description: |
            A human readable explanation specific to this occurrence of the
            problem.
          example: Connection to database timed out
  parameters:
    id:
      name: id
      in: query
      required: true
      description: uuid id
      schema:
        type: string
        format: uuid
    produto:
      name: produto
      in: query
      required: true
      description: nome do produto
      schema:
        type: string
        example: mouse
    valor:
      name: valor
      in: query
      description: valor
      schema:
        type: number
        format: double
        example: 10.00
    tipo:
      name: tipo
      in: query
      description: tipo do produto
      schema:
        type: string
        example: periferico
  examples:
    badRequest:
      value:
        type: https://zalando.github.io/problem/constraint-violation
        title: Bad Request
        status: 400
        detail: Invalid attribute
      summary: Bad request response
    unauthorizedRequest:
      value:
        type: https://zalando.github.io/problem/constraint-violation
        title: Unauthorized
        status: 401
        detail: Unauthorized request
      summary: Unauthorized request response
    unexpectedError:
      value:
        type: https://zalando.github.io/problem/constraint-violation
        title: Unexpected Error
        status: 500
        detail: Connection to database timed out
      summary: Bad request response

